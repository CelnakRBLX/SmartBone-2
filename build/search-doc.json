[{"title":"SmartCollider","type":0,"sectionRef":"#","url":"/SmartBone-2/docs/smartcollider","content":"","keywords":""},{"title":"Setup​","type":1,"pageTitle":"SmartCollider","url":"/SmartBone-2/docs/smartcollider#setup","content":"Add the tag &quot;SmartCollider&quot; to any objects that you want to collide with SmartBone objects.  All the attributes here are not required to have a working collider. [String] ColliderKey – Used to filter the objects that can collide with this collider, even if this is set any objects which dont have a collider key can collide with this collider aswell. [String] ColliderShape – Defines the shape of the collider, this is done automatically but can be manually specified. Option between Box, Capsule, Cylinder and Sphere "},{"title":"Bone","type":0,"sectionRef":"#","url":"/SmartBone-2/docs/bone","content":"","keywords":""},{"title":"Attributes​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/docs/bone#attributes","content":"Attributes which can be set per bone, these aren't required. [Boolean] XAxisLocked - If this is true then the bone cannot move on the x axis relative to the root part. [Boolean] YAxisLocked - If this is true then the bone cannot move on the y axis relative to the root part. [Boolean] ZAxisLocked - If this is true then the bone cannot move on the z axis relative to the root part. [NumberRange] XAxisLimits - The limit on which the bone can travel on the x axis relative to the root part, default is -inf, inf. [NumberRange] YAxisLimits - The limit on which the bone can travel on the y axis relative to the root part, default is -inf, inf. [NumberRange] ZAxisLimits - The limit on which the bone can travel on the z axis relative to the root part, default is -inf, inf. [Number] Radius - The radius of the bone, default is 0. "},{"title":"Optomization","type":0,"sectionRef":"#","url":"/SmartBone-2/docs/optomization","content":"","keywords":""},{"title":"Root Objects​","type":1,"pageTitle":"Optomization","url":"/SmartBone-2/docs/optomization#root-objects","content":"SmartBone attempts to optomize using root objects with 2 methods, checking if the object is on screen and throttling the update rate. You will want to make sure your root object is the correct size for your mesh if its too small or too big then SmartBone will incorrectly assume its off screen or on screen, throttling update rate is controlled via the attributes: ActivationDistance and ThrottleDistance on the root object. "},{"title":"Bones​","type":1,"pageTitle":"Optomization","url":"/SmartBone-2/docs/optomization#bones","content":"You will want to use the minimum amount of bones you can to achieve a pleasing effect, the more bones the longer it will take for SmartBone to update. "},{"title":"Colliders​","type":1,"pageTitle":"Optomization","url":"/SmartBone-2/docs/optomization#colliders","content":"The time complexity for colliders is O(nm) where n is the number of active colliders and m is the number of global bones, a few notes: Colliders which arent a descendant of workspace are not calculated and colliders are only calculated by objects within their sphere of influence. The collider type also contributes, spheres are by far the easiest shape to calculate then box, capsule and cylinder. I doubt it will be a noticeable hit but if your seeing a big performance hit with these then try and optomize your collider use. Don't forget to use collider keys if you have alot of colliders! "},{"title":"Constraints​","type":1,"pageTitle":"Optomization","url":"/SmartBone-2/docs/optomization#constraints","content":"Smartbone 2 offers a choice between a Spring constraint and a Distance constraint because of this if you are really short for performance then you can switch to a Distance constraint its calculation is fewer operations compared to the Spring constraint which takes longer to compute (Not that much longer but if you really want to get those microseconds out then go ahead). If you can, then try and use AxisConstraints instead of colliders, since they're local to the bone their time complexity is O(n) where n is the number of axis limits maximum of 6. "},{"title":"Wind​","type":1,"pageTitle":"Optomization","url":"/SmartBone-2/docs/optomization#wind","content":"If you want an object to have no wind influence, instead of just setting WindInfluence to 0 set the WindType attribute to an empty string, this will bypass all of the wind calculations and could possibly shave off a few ms. "},{"title":"Roblox Issues​","type":1,"pageTitle":"Optomization","url":"/SmartBone-2/docs/optomization#roblox-issues","content":"If Roblox allowed us to read TransformedWorldCFrame in parallel I'm guessing there could be a performance increase of about 1.5x, if Roblox also added something for BulkPropertySet where you could set any property without firing signals that would also be amazingly beneficial. "},{"title":"SmartBone","type":0,"sectionRef":"#","url":"/SmartBone-2/docs/smartbone","content":"","keywords":""},{"title":"Setup​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/docs/smartbone#setup","content":"Select any MeshPart with Bones under it Add the tag “SmartBone” to the MeshPart. Add a string attribute called “Roots” to the MeshPart and fill it with the name(s) of the bone(s) you want to be root(s). Separate each bone name with “,” and the Module will automatically sort your bone(s) into a list. An example of a SmartBone object with multiple roots would have a Roots attribute that looks like this: “Root1,Root2,Root3” Make sure you don’t add any spaces or characters unless they are part of the name of the bone(s) you want to be included  "},{"title":"Attributes​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/docs/smartbone#attributes","content":"All attributes listed here are optional and not required to get a SmartBone object working. [Boolean] Debug - If this attribute exists in a SmartBone object then the SmartBone Runtime Editor will appear allowing you to change attributes and visualise certain things in real time. [Number] Damping – How slowed down the calculated motion of the SmartBone(s) will be. [Number] Stiffness – How much of the bone(s) original CFrame is preserved. [Number] Inertia – How much the of the movement of the object is ignored. [Number] Elasticity – How much force is applied to return each bone to its original CFrame. [Vector3] Gravity – Direction and Magnitude of Gravity in World Space. [Vector3] Force – Additional Force applied to Bones in World Space. Supplementary to Gravity. [String] Constraint - Option between Spring and Distance. [String] WindType - Option between Sine, Noise and Hybrid. [Boolean] MatchWorkspaceWind - If true then wind is dependent on workspace.GlobalWind. [Number] WindInfluence – How much influence wind has on the SmartBone object. [Number] WindStrength - The &quot;density&quot; of the air. [Number] WindSpeed - The speed which wind travels at, only important if MatchWorkspaceWind is false. [Vector3] WindDirection - The direction in which the wind travels, only important if MatchWorkspaceWind is false. [String] ColliderKey - If this attribute is set then the object will only collide with colliders that have the same collider key. [Number] AnchorDepth – This will determine how far down in heirarchy from the Root that bones will be Anchored. [Boolean] AnchorsRotate – If true, the root bone(s) will rotate along with the rest of the bone(s), but remain in static position. If false, the root bone(s) will remain completely static in both Position and Orientation. [Number] UpdateRate – The rate in frames-per-second at which SmartBone will simulate. [Number] ActivationDistance – The distance in studs at which the SmartBone stops simulation. [Number] ThrottleDistance – The distance in studs at which the SmartBone begins to throttle simulation rates based on distance. Scales based on UpdateRate. "},{"title":"ColliderObject","type":0,"sectionRef":"#","url":"/SmartBone-2/api/ColliderObject","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"ColliderObject","url":"/SmartBone-2/api/ColliderObject#properties","content":" "},{"title":"Destroyed​","type":1,"pageTitle":"ColliderObject","url":"/SmartBone-2/api/ColliderObject#Destroyed","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ColliderObject.Destroyed: boolean   "},{"title":"Colliders​","type":1,"pageTitle":"ColliderObject","url":"/SmartBone-2/api/ColliderObject#Colliders","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; ColliderObject.Colliders: {}  "},{"title":"Functions​","type":1,"pageTitle":"ColliderObject","url":"/SmartBone-2/api/ColliderObject#functions","content":" "},{"title":"new​","type":1,"pageTitle":"ColliderObject","url":"/SmartBone-2/api/ColliderObject#new","content":"&lt;/&gt; ColliderObject.new( ColliderTable: {[number]: { Type: string, ScaleX: number, ScaleY: number, ScaleZ: number, OffsetX: number, OffsetY: number, OffsetZ: number, RotationX: number, RotationY: number, RotationZ: number }}, Object: BasePart ) → ColliderObject   "},{"title":"GetCollisions​","type":1,"pageTitle":"ColliderObject","url":"/SmartBone-2/api/ColliderObject#GetCollisions","content":"&lt;/&gt; ColliderObject:GetCollisions( Point: Vector3 , Radius: number-- Radius of bone ) → {[number]: { ClosestPoint: Vector3 , Normal: Vector3 }}   "},{"title":"DrawDebug​","type":1,"pageTitle":"ColliderObject","url":"/SmartBone-2/api/ColliderObject#DrawDebug","content":"&lt;/&gt; ColliderObject:DrawDebug( FILL_COLLIDERS: boolean, SHOW_INFLUENCE: boolean, SHOW_AWAKE: boolean, SHOW_BROADPHASE: boolean ) → ()   "},{"title":"Destroy​","type":1,"pageTitle":"ColliderObject","url":"/SmartBone-2/api/ColliderObject#Destroy","content":"&lt;/&gt; ColliderObject:Destroy() → ()  "},{"title":"Intro","type":0,"sectionRef":"#","url":"/SmartBone-2/docs/intro","content":"","keywords":""},{"title":"SmartBone 2 Crash Course​","type":1,"pageTitle":"Intro","url":"/SmartBone-2/docs/intro#smartbone-2-crash-course","content":"(From now on I'll refer to SmartBone 2 as SmartBone) There are multiple ways to work with SmartBone, here I will cover the basic side of setting up attributes and using the runtime. First of all you need to setup SmartBone! You can find the latest release with a rbxm, rbxl and source code zip here If you're working in studio you will want to download the rbxm and drag it into your game. If you just want to play around with a demo then open the rbxl file. If you're using rojo or something similar then you can use the source code (.zip) "},{"title":"Basic Setup​","type":1,"pageTitle":"Intro","url":"/SmartBone-2/docs/intro#basic-setup","content":"Take the SmartBone module and move it into ReplicatedStorage, and script in StarterPlayerScripts with this as the source: local SmartBone = require(game:GetService(&quot;ReplicatedStorage&quot;):WaitForChild(&quot;SmartBone&quot;)) SmartBone.Start() -- Start the runtime  This is all you have to do for coding, now we just setup your mesh with the tags and attributes. Select any MeshPart with Bones under it Add the tag “SmartBone” to the MeshPart. Add a string attribute called “Roots” to the MeshPart and fill it with the name(s) of the bone(s) you want to be root(s). Separate each bone name with “,” and the Module will automatically sort your bone(s) into a list. An example of a SmartBone object with multiple roots would have a Roots attribute that looks like this: “Root1,Root2,Root3” Make sure you don’t add any spaces or characters unless they are part of the name of the bone(s) you want to be included If you press play your mesh should start simulating, you can change other attributes found here. "},{"title":"Axis Limits​","type":1,"pageTitle":"Intro","url":"/SmartBone-2/docs/intro#axis-limits","content":"Let's say you've got a cape and you dont want that cape to clip into the character, you can fix that using axis limits! Axis limits are a powerful tool useful where setting up colliders would be overkill and a waste of performance. You can limit a bone to moving between 0 studs and 5 studs on the x axis relative to the root part using an attribute called &quot;XAxisLimits&quot; of type NumberRange. (This was running at 60fps but gif compression reduced it to 10fps) "},{"title":"Colliders​","type":1,"pageTitle":"Intro","url":"/SmartBone-2/docs/intro#colliders","content":"Note: If you can use axis limits to achieve the same result, do not use a collider. It would be both a waste of performance and a waste of time to setup! Colliders can be setup via a tag with the name &quot;SmartCollider&quot;, you can optomize colliders using a collider key, create a string attribute called &quot;ColliderKey&quot; on your root part and your collider. Now only colliders with that collider key can collide with your object. You can also manually change the shape of a collider using a string attribute called &quot;ColliderShape&quot; with an option of &quot;Box&quot;, &quot;Capsule&quot;, &quot;Cylinder&quot; and &quot;Sphere&quot;. "},{"title":"Update Flow Chart​","type":1,"pageTitle":"Intro","url":"/SmartBone-2/docs/intro#update-flow-chart","content":" "},{"title":"Related Documentation​","type":1,"pageTitle":"Intro","url":"/SmartBone-2/docs/intro#related-documentation","content":"API SmartBone Attributes SmartCollider Attributes Bone Attributes "},{"title":"SmartBone","type":0,"sectionRef":"#","url":"/SmartBone-2/api/SmartBone","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#properties","content":" "},{"title":"ID​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#ID","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; SmartBone.ID: string Unique ID of the root object  "},{"title":"BoneTrees​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#BoneTrees","content":"&lt;/&gt; SmartBone.BoneTrees: table Table of all bone trees under this root  "},{"title":"ColliderObjects​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#ColliderObjects","content":"&lt;/&gt; SmartBone.ColliderObjects: table Table of all colliders assigned to this root  "},{"title":"ShouldDestroy​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#ShouldDestroy","content":"&lt;/&gt; SmartBone.ShouldDestroy: boolean True if the root has no bonetrees, this is already handled by the runtime "},{"title":"Functions​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#functions","content":" "},{"title":"new​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#new","content":"&lt;/&gt; SmartBone.new() → SmartBone   "},{"title":"Start​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#Start","content":"This item only works when running on the client. Client &lt;/&gt; SmartBone.Start() → () Collects all SmartBone objects and SmartBone colliders and starts running physics + collision on them  "},{"title":"LoadObject​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#LoadObject","content":"&lt;/&gt; SmartBone:LoadObject(Object: BasePart ) → () Loads the provided object  "},{"title":"LoadColliderModule​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#LoadColliderModule","content":"&lt;/&gt; SmartBone:LoadColliderModule( ColliderModule: ModuleScript , Object: BasePart ) → () Loads the provided collider module onto the provided object  "},{"title":"LoadRawCollider​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#LoadRawCollider","content":"&lt;/&gt; SmartBone:LoadRawCollider( ColliderData: table, Object: BasePart ) → () Loads the raw collider data onto the provided object  "},{"title":"SkipUpdate​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#SkipUpdate","content":"&lt;/&gt; SmartBone:SkipUpdate() → () Resets all bone trees to their rest position  "},{"title":"StepBoneTrees​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#StepBoneTrees","content":"&lt;/&gt; SmartBone:StepBoneTrees(Delta: number) → () Updates all bone trees  "},{"title":"DrawDebug​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#DrawDebug","content":"This item only works when running on the client. Client &lt;/&gt; SmartBone:DrawDebug( DRAW_COLLIDERS: boolean, DRAW_CONTACTS: boolean, DRAW_PHYSICAL_BONE: boolean, DRAW_BONE: boolean, DRAW_AXIS_LIMITS: boolean, DRAW_ROOT_PART: boolean, DRAW_FILL_COLLIDERS: boolean, DRAW_COLLIDER_INFLUENCE: boolean, DRAW_COLLIDER_AWAKE: boolean, DRAW_COLLIDER_BROADPHASE: boolean ) → () Draws the debug gizmos  "},{"title":"Destroy​","type":1,"pageTitle":"SmartBone","url":"/SmartBone-2/api/SmartBone#Destroy","content":"&lt;/&gt; SmartBone:Destroy() → () Destroys the root and all its children "},{"title":"Collider","type":0,"sectionRef":"#","url":"/SmartBone-2/api/Collider","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#properties","content":" "},{"title":"Type​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#Type","content":"&lt;/&gt; Collider.Type: string   "},{"title":"Scale​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#Scale","content":"&lt;/&gt; Collider.Scale: Vector3    "},{"title":"Offset​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#Offset","content":"&lt;/&gt; Collider.Offset: Vector3    "},{"title":"Rotation​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#Rotation","content":"&lt;/&gt; Collider.Rotation: Vector3    "},{"title":"PreviousScale​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#PreviousScale","content":"&lt;/&gt; Collider.PreviousScale: Vector3    "},{"title":"PreviousOffset​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#PreviousOffset","content":"&lt;/&gt; Collider.PreviousOffset: Vector3    "},{"title":"PreviousRotation​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#PreviousRotation","content":"&lt;/&gt; Collider.PreviousRotation: Vector3    "},{"title":"ObjectConnection​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#ObjectConnection","content":"&lt;/&gt; Collider.ObjectConnection: RBXScriptConnection    "},{"title":"Transform​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#Transform","content":"&lt;/&gt; Collider.Transform: CFrame    "},{"title":"Size​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#Size","content":"&lt;/&gt; Collider.Size: Vector3    "},{"title":"GUID​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#GUID","content":"&lt;/&gt; Collider.GUID: string  "},{"title":"Functions​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#new","content":"&lt;/&gt; Collider.new() → ()   "},{"title":"SetObject​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#SetObject","content":"&lt;/&gt; Collider:SetObject(Object: BasePart ) → ()   "},{"title":"UpdateTransform​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#UpdateTransform","content":"&lt;/&gt; Collider:UpdateTransform() → ()   "},{"title":"FastTransform​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#FastTransform","content":"&lt;/&gt; Collider:FastTransform(ObjectData: { CFrame: CFrame , Size: Vector3 }) → ()   "},{"title":"GetClosestPoint​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#GetClosestPoint","content":"&lt;/&gt; Collider:GetClosestPoint( ObjectData: { CFrame: CFrame , Size: Vector3 }, Point: Vector3 , Radius: number ) → Vector3 | nil-- Returns nil if specified collider shape is invalid   "},{"title":"DrawDebug​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#DrawDebug","content":"&lt;/&gt; Collider:DrawDebug( ColliderObject: ColliderObject, FILL_COLLIDER: boolean, SHOW_INFLUENCE: boolean, SHOW_AWAKE: boolean, SHOW_BROADPHASE: boolean ) → ()   "},{"title":"Destroy​","type":1,"pageTitle":"Collider","url":"/SmartBone-2/api/Collider#Destroy","content":"&lt;/&gt; Collider:Destroy() → ()  "},{"title":"BoneTree","type":0,"sectionRef":"#","url":"/SmartBone-2/api/BoneTree","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#properties","content":" "},{"title":"WindOffset​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#WindOffset","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BoneTree.WindOffset: number Used in wind calculations so each bone tree has a different solution.  "},{"title":"Root​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#Root","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BoneTree.Root: Bone Root bone of the bone tree  "},{"title":"RootPart​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#RootPart","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BoneTree.RootPart: BasePart    "},{"title":"Bones​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#Bones","content":"&lt;/&gt; BoneTree.Bones: table   "},{"title":"Settings​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#Settings","content":"&lt;/&gt; BoneTree.Settings: {}   "},{"title":"UpdateRate​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#UpdateRate","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BoneTree.UpdateRate: number Throttled update rate  "},{"title":"InView​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#InView","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BoneTree.InView: boolean   "},{"title":"AccumulatedDelta​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#AccumulatedDelta","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BoneTree.AccumulatedDelta: number Used in the runtime  "},{"title":"Destroyed​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#Destroyed","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BoneTree.Destroyed: boolean True if the root part has been destroyed  "},{"title":"LocalGravity​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#LocalGravity","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BoneTree.LocalGravity: CFrame    "},{"title":"Force​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#Force","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BoneTree.Force: Vector3    "},{"title":"RestGravity​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#RestGravity","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; BoneTree.RestGravity: Vector3    "},{"title":"ObjectMove​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#ObjectMove","content":"&lt;/&gt; BoneTree.ObjectMove: Vector3  Difference between root parts last position and current position  "},{"title":"ObjectPreviousPosition​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#ObjectPreviousPosition","content":"&lt;/&gt; BoneTree.ObjectPreviousPosition: Vector3  Root parts previous position "},{"title":"Functions​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#functions","content":" "},{"title":"new​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#new","content":"&lt;/&gt; BoneTree.new( RootBone: Bone, RootPart: BasePart , Gravity: Vector3 ) → BoneTree   "},{"title":"UpdateThrottling​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#UpdateThrottling","content":"&lt;/&gt; BoneTree:UpdateThrottling( RootPosition: Vector3 -- Position of the root part (Micro Optimization) ) → () Called in BoneTree:PreUpdate()  "},{"title":"PreUpdate​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#PreUpdate","content":"&lt;/&gt; BoneTree:PreUpdate() → () Calculates object move, gravity and throttled update rate. Also calls Bone:PreUpdate()  "},{"title":"StepPhysics​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#StepPhysics","content":"&lt;/&gt; BoneTree:StepPhysics( Delta: number-- Δt ) → () Calculates forces and updates wind. Also calls Bone:StepPhysics()  "},{"title":"Constrain​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#Constrain","content":"&lt;/&gt; BoneTree:Constrain( ColliderObjects: table, Delta: number-- Δt ) → ()   "},{"title":"SkipUpdate​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#SkipUpdate","content":"&lt;/&gt; BoneTree:SkipUpdate() → () Resets all bones to their rest positions.  "},{"title":"SolveTransform​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#SolveTransform","content":"&lt;/&gt; BoneTree:SolveTransform( Delta: number-- Δt ) → ()   "},{"title":"ApplyTransform​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#ApplyTransform","content":"&lt;/&gt; BoneTree:ApplyTransform() → () Applys all the transforms to bones in serial context.  "},{"title":"DrawDebug​","type":1,"pageTitle":"BoneTree","url":"/SmartBone-2/api/BoneTree#DrawDebug","content":"&lt;/&gt; BoneTree:DrawDebug( DRAW_CONTACTS: boolean, DRAW_PHYSICAL_BONE: boolean, DRAW_BONE: boolean, DRAW_AXIS_LIMITS: boolean, DRAW_ROOT_PART: boolean ) → ()  "},{"title":"Bone","type":0,"sectionRef":"#","url":"/SmartBone-2/api/Bone","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#properties","content":" "},{"title":"Bone​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#Bone","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Bone.Bone: Bone   "},{"title":"FreeLength​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#FreeLength","content":"&lt;/&gt; Bone.FreeLength: number   "},{"title":"Weight​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#Weight","content":"&lt;/&gt; Bone.Weight: number   "},{"title":"ParentIndex​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#ParentIndex","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Bone.ParentIndex: number   "},{"title":"HeirarchyLength​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#HeirarchyLength","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Bone.HeirarchyLength: number   "},{"title":"Transform​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#Transform","content":"&lt;/&gt; Bone.Transform: CFrame    "},{"title":"LocalTransform​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#LocalTransform","content":"&lt;/&gt; Bone.LocalTransform: CFrame    "},{"title":"RootTransform​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#RootTransform","content":"&lt;/&gt; Bone.RootTransform: CFrame    "},{"title":"RootPart​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#RootPart","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Bone.RootPart: BasePart    "},{"title":"RootBone​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#RootBone","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Bone.RootBone: Bone   "},{"title":"Radius​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#Radius","content":"&lt;/&gt; Bone.Radius: number   "},{"title":"AnimatedWorldCFrame​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#AnimatedWorldCFrame","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Bone.AnimatedWorldCFrame: CFrame  Bone.TransformedWorldCFrame  "},{"title":"TransformOffset​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#TransformOffset","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Bone.TransformOffset: CFrame    "},{"title":"LocalTransformOffset​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#LocalTransformOffset","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Bone.LocalTransformOffset: CFrame    "},{"title":"RestPosition​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#RestPosition","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Bone.RestPosition: Vector3    "},{"title":"CalculatedWorldCFrame​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#CalculatedWorldCFrame","content":"This item is read only and cannot be modified. Read Only &lt;/&gt; Bone.CalculatedWorldCFrame: CFrame    "},{"title":"Position​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#Position","content":"&lt;/&gt; Bone.Position: Vector3  Internal representation of the bone  "},{"title":"Anchored​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#Anchored","content":"&lt;/&gt; Bone.Anchored: boolean   "},{"title":"AxisLocked​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#AxisLocked","content":"&lt;/&gt; Bone.AxisLocked: { boolean, boolean, boolean } XYZ order  "},{"title":"XAxisLimits​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#XAxisLimits","content":"&lt;/&gt; Bone.XAxisLimits: NumberRange    "},{"title":"YAxisLimits​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#YAxisLimits","content":"&lt;/&gt; Bone.YAxisLimits: NumberRange    "},{"title":"ZAxisLimits​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#ZAxisLimits","content":"&lt;/&gt; Bone.ZAxisLimits: NumberRange    "},{"title":"FirstSkipUpdate​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#FirstSkipUpdate","content":"&lt;/&gt; Bone.FirstSkipUpdate: boolean   "},{"title":"CollisionData​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#CollisionData","content":"&lt;/&gt; Bone.CollisionData: {}  "},{"title":"Functions​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#functions","content":" "},{"title":"ClipVelocity​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#ClipVelocity","content":"&lt;/&gt; Bone:ClipVelocity( Position: Vector3 , Vector: Vector3 ) → () Clips velocity on specified vector, Position is where we are at our current physics step (Before we set self.Position)  "},{"title":"PreUpdate​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#PreUpdate","content":"&lt;/&gt; Bone:PreUpdate(BoneTree: BoneTree) → ()   "},{"title":"StepPhysics​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#StepPhysics","content":"&lt;/&gt; Bone:StepPhysics( BoneTree: BoneTree, Force: Vector3 ) → () Force passed in via BoneTree:StepPhysics()  "},{"title":"Constrain​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#Constrain","content":"&lt;/&gt; Bone:Constrain( BoneTree: BoneTree, ColliderObjects: Vector3 , Delta: number-- Δt ) → ()   "},{"title":"SkipUpdate​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#SkipUpdate","content":"&lt;/&gt; Bone:SkipUpdate() → () Returns bone to rest position  "},{"title":"SolveTransform​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#SolveTransform","content":"&lt;/&gt; Bone:SolveTransform( BoneTree: BoneTree, Delta: number-- Δt ) → () Solves the cframe of the bones  "},{"title":"ApplyTransform​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#ApplyTransform","content":"&lt;/&gt; Bone:ApplyTransform(BoneTree: BoneTree) → () Sets the world cframes of the bones to the calculated world cframe (solved in Bone:SolveTransform())  "},{"title":"DrawDebug​","type":1,"pageTitle":"Bone","url":"/SmartBone-2/api/Bone#DrawDebug","content":"&lt;/&gt; Bone:DrawDebug( DRAW_CONTACTS: any, DRAW_PHYSICAL_BONE: any, DRAW_BONE: any, DRAW_AXIS_LIMITS: any ) → ()  "}]